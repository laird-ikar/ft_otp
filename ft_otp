#!python3

import os
import re
import qrcode
import time
import rsa
from hashlib import sha1
import random
from PIL import Image, ImageTk
import warnings
import hmac
import struct
import argparse
import tkinter as tk
import tkinter.filedialog as fdg
import signal

def generate_RSA_keys():
    (publicKey, privateKey) = rsa.newkeys(1024)
    with open('./rsa_keys/publicKey.pem', 'wb') as p:
        p.write(publicKey.save_pkcs1('PEM'))
    with open('./rsa_keys/privateKey.pem', 'wb') as p:
        p.write(privateKey.save_pkcs1('PEM'))

def load_RSA_keys():
    with open('./rsa_keys/publicKey.pem', 'rb') as p:
        publicKey = rsa.PublicKey.load_pkcs1(p.read())
    with open('./rsa_keys/privateKey.pem', 'rb') as p:
        privateKey = rsa.PrivateKey.load_pkcs1(p.read())
    return privateKey, publicKey

def qrcode_creation(seed) -> Image:
	rand = random.Random(seed)
	data = rand.randbytes(64).hex()#.to_bytes(32, sys.byteorder).hex() #rand.randbytes -> rand.getrandbits parce que apparemment la fonction randbytes a disparu depuis la derniere fois 

	# Generate QR code
	qr = qrcode.QRCode(
		version=1,
		error_correction=qrcode.constants.ERROR_CORRECT_H,
		box_size=10,
		border=4
	)
	qr.add_data(data, optimize=0) #optimize=0 sinon ca crash, va savoir pq
	qr.make(fit=True)

	qr_image = qr.make_image(fill_color="black", back_color="white")
	# Load the overlay image
	overlay_image = Image.open("overlay_image.png")

	# Load the overlay image with transparency intact
	overlay_image = Image.open("overlay_image.png").convert("RGBA")

    # Calculate the desired size of the overlay image
	desired_size = (qr_image.size[0] // 3, qr_image.size[1] // 3)

    # Resize the overlay image while maintaining its aspect ratio
	with warnings.catch_warnings():
		warnings.filterwarnings("ignore", category=DeprecationWarning)  # Filter out the Antialias deprecation warning
		overlay_image.thumbnail(desired_size, Image.ANTIALIAS)

    # Calculate the position to center the overlay image on the QR code
	position = ((qr_image.size[0] - overlay_image.size[0]) // 2, (qr_image.size[1] - overlay_image.size[1]) // 2)

    # Create a composite image by pasting the overlay image onto the QR code at the calculated position
	final_image = Image.new("RGBA", qr_image.size)
	final_image.paste(qr_image, (0, 0))
	final_image.paste(overlay_image, position, overlay_image)

	return final_image


def encode(key) -> str:
	if not os.path.isdir('./rsa_keys'):
		os.mkdir('./rsa_keys')
		generate_RSA_keys()
	keys = load_RSA_keys()
	return rsa.encrypt(key.encode('ascii'), keys[1])

def decode(cipher) -> int:
	keys = load_RSA_keys()
	return bytes.fromhex(rsa.decrypt(cipher, keys[0]).decode('ascii'))

def generate_key(keyfile):
	if not os.path.isfile(keyfile):
		print("Keyfile does not exist .‚Å†¬∑‚Å†¬¥‚Å†¬Ø‚Å†‚Å†(‚Å†>‚Å†‚ñÇ‚Å†<‚Å†)‚Å†¬¥‚Å†¬Ø‚Å†‚Å†¬∑‚Å†.")
		exit(1)
	with open(keyfile, "r") as file:
		key = file.read()
	if (len(key) < 64):
		print("(‚Å†„Éé‚Å†‚Ä¢ÃÄ‚Å† ‚Å†o‚Å† ‚Å†‚Ä¢ÃÅ‚Å† ‚Å†)‚Å†„Éé‚Å† ‚Å†~‚Å† ‚Å†‚îª‚Å†‚îÅ‚Å†‚îª Keyfile must be at least 64 characters long")
		exit(1)
	key = key.lower().strip()
	if not re.match(r"^[0-9a-fA-F]+$", key):
		print("Keyfile must only contain hexadecimal characters (‚Å†‚óè‚Å†¬¥‚Å†‚åì‚Å†`‚Å†‚óè‚Å†)")
		exit(1)
	with open ("ft_otp.key", "wb+") as fkey:
		fkey.write(encode(key))

def generate_tmp_password(key):
	key = decode(key)
	time_count = int(time.time() // 30)
	hs = hmac_sha1(key, time_count)
	sbits = dt(hs)
	snum = Saint_Ton_Nhum(sbits)
	tmp_passwd = snum % 10 ** 6
	return tmp_passwd

def hmac_sha1(key:int, count:int) -> bytes: # üíØ no bug, checked against python hmac
	return hmac.digest(key, struct.pack('>Q', count), sha1)

#takes a hs as argument, and executes dt on it
def dt(hs:bytes) -> bytes: # fuck seems legit (‚Å†„Éé‚Å†‚Ä¢ÃÄ‚Å† ‚Å†o‚Å† ‚Å†‚Ä¢ÃÅ‚Å† ‚Å†)‚Å†„Éé‚Å† ‚Å†~‚Å† ‚Å†‚îª‚Å†‚îÅ‚Å†‚îª
	offset = hs[-1] & 0x0f
	bincode = (hs[offset]  & 0x7f) << 24 | (hs[offset+1] & 0xff) << 16 | (
		hs[offset+2] & 0xff) <<  8 | (hs[offset+3] & 0xff)
	return bincode

def Saint_Ton_Nhum(sbits):
	return sbits


# INTERFACE #
def make_interface():
	global key
	global passwd
	global passwd_timer
	global is_on
	key = b""
	passwd = ""

	signal.signal(signal.SIGINT, signal.SIG_DFL)

	root = tk.Tk()
	left_frame = tk.Frame(root)
	left_frame.pack(side=tk.LEFT, padx=20)
	right_frame = tk.Frame(root)
	right_frame.pack(side=tk.RIGHT, padx=20)

	def hex_callback(sv:tk.StringVar):
		global key
		global passwd
		data = re.sub(r"[^0-9a-fA-F]", "", sv.get())
		data = data[:64]
		sv.set(data)
		if (len(data) != 64):
			return
		key = encode(data)
		passwd = str(generate_tmp_password(key))
		qr_code = ImageTk.PhotoImage(qrcode_creation(passwd))
		qrcode_label.configure(image=qr_code)
		qrcode_label.image = qr_code
		code_label_update()


	input_label = tk.Label(left_frame, text="Your hex key here")
	input_label.pack(side=tk.TOP)
	hex_sv = tk.StringVar()
	hex_sv.trace("w", lambda name, index, mode, sv=hex_sv: hex_callback(hex_sv))
	hex_field = tk.Entry(left_frame, textvariable=hex_sv, width=72)
	hex_field.pack(pady=10, expand=True, fill=tk.X)

	qrcode_label = tk.Label(right_frame)
	qrcode_label.pack(side=tk.TOP)

	code_label = tk.Label(right_frame, text="______", font=("Arial", 25))
	is_on = False
	def code_label_enter(e):
		global is_on
		if (passwd != ""):
			is_on = True
			code_label.configure(text=passwd)
	def code_label_leave(e):
		global is_on
		if (passwd != ""):
			is_on = False
			code_label.configure(text="______")
	def code_label_update():
		if (is_on):
			code_label.configure(text=passwd)
	code_label.bind("<Enter>", code_label_enter)
	code_label.bind("<Leave>", code_label_leave)
	code_label.pack(side=tk.TOP, fill=tk.X, expand=True)

	timer_label = tk.Label(right_frame, text=str(30.0))
	passwd_timer = 30000.0
	def update_timer():
		global passwd_timer
		timer_label.configure(text=str(passwd_timer / 1000))
		if (passwd_timer <= 0):
			passwd_timer = 0
			return
		passwd_timer -= 100.0
		timer_label.after(100, update_timer)
		
	timer_label.after(100, update_timer)
	timer_label.pack()

	def update_callback():
		global passwd_timer
		passwd_timer = 30000.0
		hex_callback(hex_sv)
		root.after(30000, update_callback)
	root.after(30000, update_callback)
	
	root.mainloop()



# MAIN ##
def main():

	parser = argparse.ArgumentParser(prog="ft_otp", description="generates a 1 time password that expires after 30 secs from a 64 hex key")
	group = parser.add_mutually_exclusive_group()
	group.add_argument("-g", metavar="HEX FILE", type=str, help="generates a .key file from a 64 hex string")
	group.add_argument("-k", metavar="KEY FILE", type=str, help="generates a 1 time password that expires after 30 secs from a .key file")
	group.add_argument("-i", "--interface", action="store_true", help="interface mode")

	args = vars(parser.parse_args())

	hex_file_path = args.get("g")
	key_file_path = args.get("k")

	if (args.get("interface")):
		make_interface()
		exit(0)


	if (hex_file_path):
		generate_key(hex_file_path)
		print("  .„Éª„ÄÇ.„Éª‚ú≠„Çú„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª")
		print("‚úßÔΩ•ÔæüYour key was successfully and gracefully generated in your beloved ft_otp.key file, my dear ÔæüÔΩ•‚úß")
		print("  .„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú„Éª„ÄÇ. .„Éª„ÄÇ.„Éª„Çú‚ú≠„Éª.„Éª‚ú´„Éª„Çú")

	if (key_file_path):
		if not os.path.isfile(key_file_path):
			print("Keyfile does not exist .‚Å†¬∑‚Å†¬¥‚Å†¬Ø‚Å†‚Å†(‚Å†>‚Å†‚ñÇ‚Å†<‚Å†)‚Å†¬¥‚Å†¬Ø‚Å†‚Å†¬∑‚Å†.")
			exit(1)
		with open(key_file_path, "rb") as file:
			key = file.read()
		passwd = generate_tmp_password(key)
		print(f"(‚Å†‚òû‚Å† ‚Å†‡≤†‚Å†_‚Å†‡≤†‚Å†)‚Å†‚òû Take this bg -> {passwd:06}")
		img = qrcode_creation(passwd)
		# Save the final image
		img.save("qr_code.png")
		os.system("open qr_code.png")


if __name__ == "__main__":
	main()